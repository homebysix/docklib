name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    uses: ./.github/workflows/test.yml

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

        # Detect if this is a pre-release
        if [[ "$VERSION" =~ (a|b|rc) ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "🚨 This is a PRE-RELEASE version: $VERSION"
          echo "   - Contains alpha (a), beta (b), or release candidate (rc) markers"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "✅ This is a STABLE release version: $VERSION"
        fi

    - name: Build package
      run: |
        python -m build

    - name: List build artifacts
      run: |
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ steps.version.outputs.version }}
        path: dist/

  testpypi-publish:
    runs-on: ubuntu-latest
    needs: build

    # Required for PyPI Trusted Publishers
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION to TestPyPI"

        # Detect if this is a pre-release
        if [[ "$VERSION" =~ (a|b|rc) ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "🚨 This is a PRE-RELEASE version: $VERSION"
          echo "   - Contains alpha (a), beta (b), or release candidate (rc) markers"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "✅ This is a STABLE release version: $VERSION"
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ steps.version.outputs.version }}
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

    - name: TestPyPI Publication Summary
      run: |
        echo "📦 Successfully published docklib ${{ steps.version.outputs.version }} to TestPyPI"
        if [[ "${{ steps.version.outputs.prerelease }}" == "true" ]]; then
          echo "🚨 This is a PRE-RELEASE version"
        fi
        echo "🔍 Test: pip install --index-url https://test.pypi.org/simple/ docklib==${{ steps.version.outputs.version }}"
        echo "📋 See RELEASING.md for complete workflow details"

  pypi-publish:
    runs-on: ubuntu-latest
    needs: testpypi-publish
    environment: pypi

    # Required for PyPI Trusted Publishers
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION to PyPI"

        # Detect if this is a pre-release
        if [[ "$VERSION" =~ (a|b|rc) ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "🚨 This is a PRE-RELEASE version: $VERSION"
          echo "   - Will be published to PyPI with pre-release flag"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "✅ This is a STABLE release version: $VERSION"
          echo "   - Will be published as the latest stable version"
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ steps.version.outputs.version }}
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: PyPI Publication Summary
      run: |
        echo "🎉 Successfully published docklib ${{ steps.version.outputs.version }} to PyPI"
        if [[ "${{ steps.version.outputs.prerelease }}" == "true" ]]; then
          echo "🚨 PRE-RELEASE: Remember to mark GitHub release as pre-release"
        fi
        echo "📦 Package: https://pypi.org/project/docklib/${{ steps.version.outputs.version }}/"
        echo "📋 Next: Create GitHub release manually (see RELEASING.md)"
